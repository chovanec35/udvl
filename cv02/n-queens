# Toto je ukazkovy program, ktory ukazuje ako vytvorit vstup pre SAT solver,
# spustit ho a precitat a rozparsovat jeho vystup. Mozete ho skludom pouzit
# ako kostru vasho riesenia.
#
# Tento program predpoklada, ze minisat / minisat.exe
# sa nachadza
# - Linux: v adresari, kam ukazuje PATH
# - Windows: v adresari, kam ukazuje PATH, alebo v akt. adresari
# Podla potreby upravte cestu v premennej CESTA_K_MINISAT

import os

CESTA_K_MINISAT = "minisat"
global N
N = 0

Kim = 1
Jim = 2
Sarah = 3
intToName = ["", "Kim", "Jim", "Sarah"]


# Pomocna funkcia na zapis implikacie do suboru
def impl(subor, a, b):
    subor.write( "{0:d} {1:d} 0\n".format(-a, b) )

def q(i,j):
    return i*N+j+1


# Funkcia zapisujuca problem do vstupneho suboru SAT solvera v spravnom formate
def zapis_problem(subor):
    # v kazdom riadku je aspon jedna dama
    for i in range(N):
        for j in range(N):
            subor.write("{0:d} ".format(q(i,j)))
        subor.write("0\n")
    
    # v kazdom riadku je najviac jedna dama
    for i in range(N):
        for j1 in range(N):
            for j2 in range(N):
                if j1 != j2:
                    impl(subor,q(i,j1),-q(i,j2))
    
    # v kazdom stlpci je najviac jedna dama
    for j in range(N):
        for i1 in range(N):
            for i2 in range(N):
                if i1 != i2:
                    impl(subor,q(i1,j),-q(i2,j))
    
##    # na kazdej uhlopriecke je najviac jedna dama do PRAVA
##    for j in range(N):
##        for i1 in range(N):
##            for i2 in range(1, N):
##                if q(j+i2,i1+i2) <= N*N:
##                    impl(subor,q(j,i1),-q(j+i2,i1+i2))
##                    
##    # na kazdej uhlopriecke je najviac jedna dama do LAVA
##    for j in range(N):
##        cou = N
##        while cou != 0:
##            cou -= 0
##            x = 0
##            for i2 in range(1, N):
##                x += 1
##                if j + x < N and i1-i2 >= 0:
##                    impl(subor,q(j,i1),-q(j+i2,i1+i2))




# Funkcia vypisujuca riesenie najdene SAT solverom z jeho vystupneho suboru
def vypis_riesenie(ries):
    # rozbijeme riesenie na cisla/premenne
    vs = ries.split()
    # zahodime ukoncovaciu 0
    vs = vs[0:-1]
    # vypiseme vyznam riesenia

    p1 = []
    p2 = []
    for i in range(N):
        for j in range(N):
            p1.append(vs[j+i*N])
        p2.append(p1)
        p1 = []
 
    vys = ''
    for i in range(len(p2)):
        for j in range(len(p2[i])):
            if int(p2[i][j]) > 0:
                vys += str(i) + ' ' + str(j) + '\n'
    print(vys[0:-1])

def main():
    # Normalne by sme tu mozno nieco nacitavali zo standardneho vstupu,
    # ale tato uloha nema ziadny vstup.
    global N
    N = int(input('Zadaj vstup: '))
    
    # otvorime subor, do ktoreho zapiseme vstup pre sat solver
    try:
        with open("vstup.txt", "w") as o:
            # zapiseme nas problem
            zapis_problem(o)
    except IOError as e:
        print("Chyba pri vytvarani vstupneho suboru ({0}): {1}".format(
                e.errno, e.strerror))
        return 1

    # spustime SAT solver
    os.system("{} vstup.txt vystup.txt".format(CESTA_K_MINISAT));

    # nacitame jeho vystup
    try:
        with open("vystup.txt", "r") as i:
            # prvy riadok je SAT alebo UNSAT
            sat = i.readline()
            if sat == "SAT\n":
                print("Riesenie:")
                # druhy riadok je riesenie
                ries = i.readline()
                vypis_riesenie(ries)
            else:
                print("Ziadne riesenie")
    except IOError as e:
        print("Chyba pri nacitavani vystupneho suboru ({0}): {1}".format(
                e.errno, e.strerror))
        return 1

    return 0

if __name__ == "__main__":
    main()
